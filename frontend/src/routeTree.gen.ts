/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardUsersIndexImport } from './routes/dashboard/users/index'
import { Route as DashboardRolesIndexImport } from './routes/dashboard/roles/index'
import { Route as DashboardOrganizationsIndexImport } from './routes/dashboard/organizations/index'
import { Route as DashboardItemsIndexImport } from './routes/dashboard/items/index'
import { Route as DashboardUsersUserIdImport } from './routes/dashboard/users/$userId'
import { Route as DashboardRolesRoleIdImport } from './routes/dashboard/roles/$roleId'
import { Route as DashboardOrganizationsOrganizationIdImport } from './routes/dashboard/organizations/$organizationId'
import { Route as DashboardItemsItemIdImport } from './routes/dashboard/items/$itemId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardUsersIndexRoute = DashboardUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardRolesIndexRoute = DashboardRolesIndexImport.update({
  id: '/roles/',
  path: '/roles/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardOrganizationsIndexRoute =
  DashboardOrganizationsIndexImport.update({
    id: '/organizations/',
    path: '/organizations/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

const DashboardItemsIndexRoute = DashboardItemsIndexImport.update({
  id: '/items/',
  path: '/items/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardUsersUserIdRoute = DashboardUsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardRolesRoleIdRoute = DashboardRolesRoleIdImport.update({
  id: '/roles/$roleId',
  path: '/roles/$roleId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardOrganizationsOrganizationIdRoute =
  DashboardOrganizationsOrganizationIdImport.update({
    id: '/organizations/$organizationId',
    path: '/organizations/$organizationId',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

const DashboardItemsItemIdRoute = DashboardItemsItemIdImport.update({
  id: '/items/$itemId',
  path: '/items/$itemId',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/items/$itemId': {
      id: '/dashboard/items/$itemId'
      path: '/items/$itemId'
      fullPath: '/dashboard/items/$itemId'
      preLoaderRoute: typeof DashboardItemsItemIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/organizations/$organizationId': {
      id: '/dashboard/organizations/$organizationId'
      path: '/organizations/$organizationId'
      fullPath: '/dashboard/organizations/$organizationId'
      preLoaderRoute: typeof DashboardOrganizationsOrganizationIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/roles/$roleId': {
      id: '/dashboard/roles/$roleId'
      path: '/roles/$roleId'
      fullPath: '/dashboard/roles/$roleId'
      preLoaderRoute: typeof DashboardRolesRoleIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/users/$userId': {
      id: '/dashboard/users/$userId'
      path: '/users/$userId'
      fullPath: '/dashboard/users/$userId'
      preLoaderRoute: typeof DashboardUsersUserIdImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/items/': {
      id: '/dashboard/items/'
      path: '/items'
      fullPath: '/dashboard/items'
      preLoaderRoute: typeof DashboardItemsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/organizations/': {
      id: '/dashboard/organizations/'
      path: '/organizations'
      fullPath: '/dashboard/organizations'
      preLoaderRoute: typeof DashboardOrganizationsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/roles/': {
      id: '/dashboard/roles/'
      path: '/roles'
      fullPath: '/dashboard/roles'
      preLoaderRoute: typeof DashboardRolesIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/users/': {
      id: '/dashboard/users/'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardItemsItemIdRoute: typeof DashboardItemsItemIdRoute
  DashboardOrganizationsOrganizationIdRoute: typeof DashboardOrganizationsOrganizationIdRoute
  DashboardRolesRoleIdRoute: typeof DashboardRolesRoleIdRoute
  DashboardUsersUserIdRoute: typeof DashboardUsersUserIdRoute
  DashboardItemsIndexRoute: typeof DashboardItemsIndexRoute
  DashboardOrganizationsIndexRoute: typeof DashboardOrganizationsIndexRoute
  DashboardRolesIndexRoute: typeof DashboardRolesIndexRoute
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardItemsItemIdRoute: DashboardItemsItemIdRoute,
  DashboardOrganizationsOrganizationIdRoute:
    DashboardOrganizationsOrganizationIdRoute,
  DashboardRolesRoleIdRoute: DashboardRolesRoleIdRoute,
  DashboardUsersUserIdRoute: DashboardUsersUserIdRoute,
  DashboardItemsIndexRoute: DashboardItemsIndexRoute,
  DashboardOrganizationsIndexRoute: DashboardOrganizationsIndexRoute,
  DashboardRolesIndexRoute: DashboardRolesIndexRoute,
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/items/$itemId': typeof DashboardItemsItemIdRoute
  '/dashboard/organizations/$organizationId': typeof DashboardOrganizationsOrganizationIdRoute
  '/dashboard/roles/$roleId': typeof DashboardRolesRoleIdRoute
  '/dashboard/users/$userId': typeof DashboardUsersUserIdRoute
  '/dashboard/items': typeof DashboardItemsIndexRoute
  '/dashboard/organizations': typeof DashboardOrganizationsIndexRoute
  '/dashboard/roles': typeof DashboardRolesIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/items/$itemId': typeof DashboardItemsItemIdRoute
  '/dashboard/organizations/$organizationId': typeof DashboardOrganizationsOrganizationIdRoute
  '/dashboard/roles/$roleId': typeof DashboardRolesRoleIdRoute
  '/dashboard/users/$userId': typeof DashboardUsersUserIdRoute
  '/dashboard/items': typeof DashboardItemsIndexRoute
  '/dashboard/organizations': typeof DashboardOrganizationsIndexRoute
  '/dashboard/roles': typeof DashboardRolesIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/items/$itemId': typeof DashboardItemsItemIdRoute
  '/dashboard/organizations/$organizationId': typeof DashboardOrganizationsOrganizationIdRoute
  '/dashboard/roles/$roleId': typeof DashboardRolesRoleIdRoute
  '/dashboard/users/$userId': typeof DashboardUsersUserIdRoute
  '/dashboard/items/': typeof DashboardItemsIndexRoute
  '/dashboard/organizations/': typeof DashboardOrganizationsIndexRoute
  '/dashboard/roles/': typeof DashboardRolesIndexRoute
  '/dashboard/users/': typeof DashboardUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/'
    | '/dashboard/items/$itemId'
    | '/dashboard/organizations/$organizationId'
    | '/dashboard/roles/$roleId'
    | '/dashboard/users/$userId'
    | '/dashboard/items'
    | '/dashboard/organizations'
    | '/dashboard/roles'
    | '/dashboard/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/dashboard/items/$itemId'
    | '/dashboard/organizations/$organizationId'
    | '/dashboard/roles/$roleId'
    | '/dashboard/users/$userId'
    | '/dashboard/items'
    | '/dashboard/organizations'
    | '/dashboard/roles'
    | '/dashboard/users'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/'
    | '/dashboard/items/$itemId'
    | '/dashboard/organizations/$organizationId'
    | '/dashboard/roles/$roleId'
    | '/dashboard/users/$userId'
    | '/dashboard/items/'
    | '/dashboard/organizations/'
    | '/dashboard/roles/'
    | '/dashboard/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/",
        "/dashboard/items/$itemId",
        "/dashboard/organizations/$organizationId",
        "/dashboard/roles/$roleId",
        "/dashboard/users/$userId",
        "/dashboard/items/",
        "/dashboard/organizations/",
        "/dashboard/roles/",
        "/dashboard/users/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/items/$itemId": {
      "filePath": "dashboard/items/$itemId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/organizations/$organizationId": {
      "filePath": "dashboard/organizations/$organizationId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/roles/$roleId": {
      "filePath": "dashboard/roles/$roleId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/users/$userId": {
      "filePath": "dashboard/users/$userId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/items/": {
      "filePath": "dashboard/items/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/organizations/": {
      "filePath": "dashboard/organizations/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/roles/": {
      "filePath": "dashboard/roles/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/users/": {
      "filePath": "dashboard/users/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
